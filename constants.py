# constants.py
import pygame

# 화면 설정
SIMULATION_AREA_WIDTH = 800
SIMULATION_AREA_HEIGHT = 600

GRAPH_AREA_WIDTH = 300
GRAPH_AREA_X_START = SIMULATION_AREA_WIDTH

SCREEN_WIDTH = SIMULATION_AREA_WIDTH + GRAPH_AREA_WIDTH
SCREEN_HEIGHT = SIMULATION_AREA_HEIGHT

FPS = 60
SIMULATION_TICK_RATE = 0.005

# 기본 색상 정의
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREY = (200, 200, 200)

GREEN = (0, 255, 0)         # A
BLUE = (0, 0, 255)          # B
RED = (255, 0, 0)           # C
YELLOW = (255, 255, 0)      # D
CYAN = (0, 255, 255)        # E
MAGENTA = (255, 0, 255)     # F
ORANGE = (255, 165, 0)      # G
PURPLE = (128, 0, 128)      # H
BROWN = (165, 42, 42)       # I

# 에너지 풀
INITIAL_GLOBAL_ENERGY_POOL = 30000.0

# 개체 공통
CREATURE_LIFESPAN_TICKS = 2000

# "운(Luck)" 시스템
LUCK_MIN = 0.3
LUCK_MAX = 1.7
LUCK_DEFAULT = 1.0
LUCK_ADJUSTMENT_PERIOD_TICKS = 5
LUCK_ADJUSTMENT_K_FACTOR = 0.8

# 개체 A 설정
CREATURE_A_RADIUS = 4
CREATURE_A_INITIAL_COUNT = 20 # 가장 많음
CREATURE_A_FIXED_ENERGY = 10.0
CREATURE_A_CREATION_COST = 10.0
CREATURE_A_CREATION_PERIOD_TICKS = 5
CREATURE_A_BASE_CREATION_COUNT = 4.5

# 개체 B 설정 (A를 포식)
CREATURE_B_RADIUS = 6
CREATURE_B_INITIAL_COUNT = 12
CREATURE_B_FIXED_ENERGY = round(CREATURE_A_FIXED_ENERGY * 0.618, 2) # 6.18
CREATURE_B_PREY_COUNT_FOR_REPRODUCTION = 3
CREATURE_B_BASE_MOVE_SPEED = 3.0
CREATURE_B_BASE_REPRODUCTION_SUCCESS_RATE = 0.85
CREATURE_B_HUNT_RADIUS = 80

# 개체 C 설정 (B를 포식)
CREATURE_C_RADIUS = 8
CREATURE_C_INITIAL_COUNT = 7
CREATURE_C_FIXED_ENERGY = round(CREATURE_B_FIXED_ENERGY * 0.618, 2) # 3.82
CREATURE_C_PREY_COUNT_FOR_REPRODUCTION = 2
CREATURE_C_BASE_MOVE_SPEED = 4.0
CREATURE_C_BASE_REPRODUCTION_SUCCESS_RATE = 0.75 # 기존 값 유지
CREATURE_C_HUNT_RADIUS = 69 # 기존 값 유지

# 개체 D 설정 (C를 포식)
CREATURE_D_RADIUS = 10
CREATURE_D_INITIAL_COUNT = 4
CREATURE_D_FIXED_ENERGY = round(CREATURE_C_FIXED_ENERGY * 0.618, 2) # 예: 2.36
CREATURE_D_PREY_COUNT_FOR_REPRODUCTION = 2
CREATURE_D_BASE_MOVE_SPEED = 4.2
CREATURE_D_BASE_REPRODUCTION_SUCCESS_RATE = 0.70
CREATURE_D_HUNT_RADIUS = 59

# 개체 E 설정 (D를 포식)
CREATURE_E_RADIUS = 12
CREATURE_E_INITIAL_COUNT = 2
CREATURE_E_FIXED_ENERGY = round(CREATURE_D_FIXED_ENERGY * 0.618, 2) # 예: 1.46
CREATURE_E_PREY_COUNT_FOR_REPRODUCTION = 2
CREATURE_E_BASE_MOVE_SPEED = 4.4
CREATURE_E_BASE_REPRODUCTION_SUCCESS_RATE = 0.65
CREATURE_E_HUNT_RADIUS = 49

# 개체 F 설정 (E를 포식)
CREATURE_F_RADIUS = 15
CREATURE_F_INITIAL_COUNT = 0
CREATURE_F_FIXED_ENERGY = round(CREATURE_E_FIXED_ENERGY * 0.618, 2) # 예: 0.90
CREATURE_F_PREY_COUNT_FOR_REPRODUCTION = 3 # 포식량 증가
CREATURE_F_BASE_MOVE_SPEED = 4.6
CREATURE_F_BASE_REPRODUCTION_SUCCESS_RATE = 0.60
CREATURE_F_HUNT_RADIUS = 40

# 개체 G 설정 (F를 포식)
CREATURE_G_RADIUS = 17
CREATURE_G_INITIAL_COUNT = 0
CREATURE_G_FIXED_ENERGY = round(CREATURE_F_FIXED_ENERGY * 0.618, 2) # 예: 0.56
CREATURE_G_PREY_COUNT_FOR_REPRODUCTION = 3
CREATURE_G_BASE_MOVE_SPEED = 4.8
CREATURE_G_BASE_REPRODUCTION_SUCCESS_RATE = 0.55
CREATURE_G_HUNT_RADIUS = 55

# 개체 H 설정 (G를 포식)
CREATURE_H_RADIUS = 19
CREATURE_H_INITIAL_COUNT = 0
CREATURE_H_FIXED_ENERGY = round(CREATURE_G_FIXED_ENERGY * 0.618, 2) # 예: 0.35
CREATURE_H_PREY_COUNT_FOR_REPRODUCTION = 3
CREATURE_H_BASE_MOVE_SPEED = 5.0
CREATURE_H_BASE_REPRODUCTION_SUCCESS_RATE = 0.50
CREATURE_H_HUNT_RADIUS = 60

# 개체 I 설정 (H를 포식 - 최상위 포식자)
CREATURE_I_RADIUS = 210
CREATURE_I_INITIAL_COUNT = 0
CREATURE_I_FIXED_ENERGY = round(CREATURE_H_FIXED_ENERGY * 0.618, 2) # 예: 0.22
CREATURE_I_PREY_COUNT_FOR_REPRODUCTION = 4 # 더 많은 포식 필요
CREATURE_I_BASE_MOVE_SPEED = 5.2
CREATURE_I_BASE_REPRODUCTION_SUCCESS_RATE = 0.45
CREATURE_I_HUNT_RADIUS = 65


# 목표 개체 수 비율 및 점유율 (A~I 9개 종)
_ratio_factor = 0.618
_ratios = [_ratio_factor**i for i in range(9)] # A=1, B=0.618, C=0.618^2 ... I=0.618^8
_total_ratio_sum = sum(_ratios)

TARGET_RATIO_A_SHARE = _ratios[0] / _total_ratio_sum
TARGET_RATIO_B_SHARE = _ratios[1] / _total_ratio_sum
TARGET_RATIO_C_SHARE = _ratios[2] / _total_ratio_sum
TARGET_RATIO_D_SHARE = _ratios[3] / _total_ratio_sum
TARGET_RATIO_E_SHARE = _ratios[4] / _total_ratio_sum
TARGET_RATIO_F_SHARE = _ratios[5] / _total_ratio_sum
TARGET_RATIO_G_SHARE = _ratios[6] / _total_ratio_sum
TARGET_RATIO_H_SHARE = _ratios[7] / _total_ratio_sum
TARGET_RATIO_I_SHARE = _ratios[8] / _total_ratio_sum


# --- HUD 설정 ---
HUD_AREA_RECT = pygame.Rect(0, 0, SIMULATION_AREA_WIDTH, 120) # HUD 높이 확장 (9종 정보 표시)
HUD_FONT_SIZE = 18 # HUD 폰트 크기 약간 줄임

# --- 그래프 설정 ---
GRAPH_PADDING = 10
GRAPH_MAX_HISTORY = 5000
GRAPH_LINE_THICKNESS = 2

GRAPH_LINE_COLOR_A = GREEN
GRAPH_LINE_COLOR_B = BLUE
GRAPH_LINE_COLOR_C = RED
GRAPH_LINE_COLOR_D = YELLOW
GRAPH_LINE_COLOR_E = CYAN
GRAPH_LINE_COLOR_F = MAGENTA
GRAPH_LINE_COLOR_G = ORANGE
GRAPH_LINE_COLOR_H = PURPLE
GRAPH_LINE_COLOR_I = BROWN

GRAPH_AXIS_COLOR = GREY
GRAPH_BG_COLOR = (20, 20, 20)
GRAPH_TEXT_COLOR = GREY
GRAPH_FONT_SIZE = 16

# --- 시뮬레이션 제어 ---
FAST_FORWARD_FACTORS = [0.3, 2.0, 4.0]

# --- 그래프 저장 설정 ---
GRAPH_SAVE_PATH = "simulation_graphs/"
GRAPH_FILENAME_PREFIX = "population_graph_"
GRAPH_SAVE_DEFAULT_WIDTH = 1600 # 저장 그래프 너비 증가
GRAPH_SAVE_DEFAULT_HEIGHT = 800 # 저장 그래프 높이 증가
GRAPH_SAVE_X_PIXELS_PER_TICK = 1